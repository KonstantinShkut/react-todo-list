{"version":3,"sources":["serviceWorker.js","store/createStore.js","store/useStore.js","hooks/useInput.js","TodoList/EditForm.js","TodoList/TodoListItem.js","TodoList/AddTodo.js","TodoList/TodoList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","demoTodo","id","uuidv4","name","description","due","moment","format","syncStore","todos","localStorage","setItem","JSON","stringify","createStore","parse","getItem","addTodo","data","todo","this","updateTodo","index","findIndex","slice","removeTodo","toggleTodo","completedDate","find","item","storeContext","React","createContext","StoreProvider","children","store","useLocalStore","Provider","value","useStore","useContext","Error","useInput","initialValue","useState","setValue","props","onChange","event","target","reset","EditForm","observer","onClose","nameProps","resetName","descriptionProps","resetDescription","toDate","setDue","close","Form","className","onSubmit","e","preventDefault","dueDate","Group","Control","placeholder","required","as","rows","selected","placeholderText","Button","variant","onClick","type","memo","onDelete","onToggle","isEditing","setEditing","toggleTodoEditing","checked","onDoubleClick","AddTodo","isFormVisible","setFormVisible","toggleForm","TodoList","isListEmpty","length","map","key","Container","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.000b00f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type Todo = {\n  id: string;\n  name: string;\n  description: string;\n  due: string;\n  completedDate?: string;\n};\n\nexport const dateFormat = 'MM/DD/YYYY';\n\nconst demoTodo = {\n  id: uuidv4(),\n  name: 'Your first task',\n  description: 'Double-click here to edit this task, check the box on the left to complete it or click the × button on the right to delete it.',\n  due: moment().format(dateFormat),\n};\n\nconst rehydrateStorage = (): Array<Todo> => {\n  return JSON.parse(localStorage.getItem('store')) || [demoTodo];\n};\n\nconst syncStore = (todos: Array<Todo>) => {\n  localStorage.setItem('store', JSON.stringify(todos));\n};\n\nexport const createStore = () => ({\n  todos: rehydrateStorage(),\n\n  addTodo(data) {\n    const todo: Todo = {\n      id: uuidv4(),\n      ...data,\n    };\n    this.todos = [todo, ...this.todos];\n    syncStore(this.todos);\n  },\n\n  updateTodo(id, data) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    const todo = this.todos[index];\n    this.todos = [\n      ...this.todos.slice(0, index),\n      {\n        ...todo,\n        ...data,\n      },\n      ...this.todos.slice(index + 1)\n    ];\n    syncStore(this.todos);\n  },\n\n  removeTodo({ id }: Todo) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    this.todos = [\n      ...this.todos.slice(0, index),\n      ...this.todos.slice(index + 1)\n    ];\n    syncStore(this.todos);\n  },\n\n  toggleTodo({ id }: Todo) {\n    const todo = this.todos.find(item => item.id === id);\n    const data = {\n      completedDate: todo.completedDate ? null : moment().format()\n    };\n    this.updateTodo(id, data);\n  },\n});\n","// @flow\n\nimport React from 'react';\nimport { createStore } from './createStore';\nimport { useLocalStore } from 'mobx-react-lite';\n\nconst storeContext = React.createContext(null);\n\nexport const StoreProvider = ({ children }) => {\n  const store = useLocalStore(createStore)\n  return (\n    <storeContext.Provider value={store}>\n      {children}\n    </storeContext.Provider>\n  );\n}\n\nexport const useStore = () => {\n  const store = React.useContext(storeContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.');\n  }\n  return store;\n}\n","import { useState } from 'react';\n\nexport const useInput = (initialValue = '') => {\n  const [value, setValue] = useState(initialValue);\n\n  const props = {\n    value,\n    onChange: event => setValue(event.target.value)\n  };\n\n  const reset = () => setValue('');\n\n  return [value, props, reset];\n};\n","// @flow\n\nimport React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Form } from 'react-bootstrap';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useStore } from '../store/useStore';\nimport { useInput } from '../hooks/useInput';\nimport { dateFormat } from '../store/createStore';\nimport type { Todo } from '../store/createStore';\n\ntype Props = {\n  todo?: Todo;\n  onClose: () => void;\n};\n\nexport const EditForm = observer(({ todo, onClose }: Props) => {\n  const store = useStore();\n  const [name, nameProps, resetName] = useInput(todo ? todo.name : '');\n  const [description, descriptionProps, resetDescription] = useInput(todo ? todo.description : '');\n  const [due, setDue] = useState(todo && todo.due ? moment(todo.due).toDate() : '');\n\n  const saveTodo = (e) => {\n    e.preventDefault();\n    const dueDate = due && moment(due).format(dateFormat);\n    const data = { name, description, due: dueDate };\n    todo\n      ? store.updateTodo(todo.id, data)\n      : store.addTodo(data);\n    close();\n  };\n\n  const close = () => {\n    resetName();\n    resetDescription();\n    setDue('');\n    onClose();\n  };\n\n  return (\n    <Form className=\"p-4 shadow\" onSubmit={saveTodo}>\n      {!todo && <>\n        <h4>Add New Task</h4>\n        <p className=\"text-muted\">Please fill out the form to add a new task.</p>\n      </>}\n      <Form.Group>\n        <Form.Control placeholder=\"Name\" required {...nameProps} />\n      </Form.Group>\n      <Form.Group>\n        <Form.Control as=\"textarea\" rows=\"2\" placeholder=\"Description\" {...descriptionProps} />\n      </Form.Group>\n      <Form.Group>\n        <DatePicker\n          className=\"form-control\"\n          selected={due}\n          placeholderText=\"Target completion date\"\n          onChange={value => setDue(value)}\n        />\n      </Form.Group>\n      <div className=\"text-right mb-2\">\n        <Button variant=\"default\" onClick={close}>\n          Cancel\n        </Button>\n        <Button className=\"ml-3\" variant=\"round\" type=\"submit\">\n          {todo ? 'Update' : 'Add Task'}\n        </Button>\n      </div>\n    </Form>\n  );\n});\n","// @flow\n\nimport React, { useState } from 'react';\nimport type { Todo } from '../store/createStore';\nimport moment from 'moment';\nimport { EditForm } from './EditForm';\n\ntype Props = {\n  todo: Todo;\n  onDelete: (todo: Todo) => void;\n  onToggle: (todo: Todo) => void;\n};\n\nconst TodoListItem = ({ todo, onDelete, onToggle }: Props) => {\n  const [isEditing, setEditing] = useState(false);\n\n  const deleteTodo = () => onDelete(todo);\n\n  const toggleTodoCompletion = () => onToggle(todo);\n\n  const toggleTodoEditing = () => setEditing(!isEditing);\n\n  return (\n    <li className={!!todo.completedDate ? 'done' : ''}>\n      {isEditing && <EditForm todo={todo} onClose={toggleTodoEditing} />}\n      {!isEditing && <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={!!todo.completedDate}\n          onChange={toggleTodoCompletion}\n        />\n        <label onDoubleClick={toggleTodoEditing}>\n          <div className=\"name\">{todo.name}</div>\n          <div className=\"text-muted\">\n            {\n              todo.description && <div className=\"description my-2\">{todo.description}</div>\n            }\n            <div className=\"date\">\n              {todo.due && <span className=\"completion\">Due {todo.due}</span>}\n              {todo.completedDate && <span className=\"completed\">\n                — Completed {moment(todo.completedDate).format('LLL')}\n              </span>}\n            </div>\n          </div>\n        </label>\n        <button className=\"destroy\" onClick={deleteTodo} />\n      </div>}\n    </li>\n  );\n};\n\nexport default React.memo(TodoListItem);\n","// @flow\n\nimport React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button } from 'react-bootstrap';\nimport { EditForm } from './EditForm';\n\nexport const AddTodo = observer(() => {\n  const [isFormVisible, setFormVisible] = useState(false);\n  const toggleForm = () => setFormVisible(!isFormVisible);\n\n  return (\n    <section className=\"mb-4 text-center\">\n      {isFormVisible\n        ? <EditForm onClose={toggleForm} />\n        : <Button variant=\"round\" onClick={toggleForm}>Add New Task</Button>}\n    </section>\n  );\n});\n","// @flow\n\nimport React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../store/useStore';\nimport TodoListItem from './TodoListItem';\nimport { AddTodo } from './AddTodo';\nimport './TodoList.css';\n\nexport const TodoList = observer(() => {\n  const store = useStore();\n  const isListEmpty = !store.todos.length;\n\n  return (\n    <div className=\"my-5\">\n      <AddTodo />\n      {isListEmpty && <p className=\"text-center text-muted\">\n        You don't have any tasks yet. <br />\n        Click Add New Task button above to add one.\n      </p>}\n      <ul className=\"todo-list shadow\">\n        {store.todos.map(todo => <TodoListItem\n          key={todo.id}\n          todo={todo}\n          onDelete={store.removeTodo}\n          onToggle={store.toggleTodo}\n        />)}\n      </ul>\n    </div>\n  );\n});\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { TodoList } from './TodoList/TodoList';\nimport { StoreProvider } from './store/useStore';\n\nexport default () => {\n  return (\n    <Container className=\"mb-5 col-lg-6 col-md-8\">\n      <StoreProvider>\n        <TodoList />\n      </StoreProvider>\n    </Container>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}