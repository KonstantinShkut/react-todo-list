{"version":3,"sources":["serviceWorker.ts","store/createStore.ts","store/useStore.tsx","hooks/useInput.ts","TodoList/EditForm.tsx","TodoList/TodoListItem.tsx","TodoList/AddTodo.tsx","TodoList/TodoList.tsx","App.tsx","index.tsx","logo.svg"],"names":["Boolean","window","location","hostname","match","demoTodo","id","uuidv4","name","description","due","moment","format","rehydrateStorage","store","localStorage","getItem","JSON","parse","syncStore","todos","setItem","stringify","createStore","addTodo","data","todo","this","updateTodo","index","findIndex","slice","removeTodo","toggleTodo","find","item","completedDate","storeContext","React","createContext","StoreProvider","children","useLocalStore","Provider","value","useStore","useContext","Error","useInput","initialValue","useState","setValue","props","onChange","event","target","reset","EditForm","observer","onClose","nameProps","resetName","descriptionProps","resetDescription","toDate","setDue","close","Form","className","onSubmit","e","preventDefault","dueDate","Group","Control","placeholder","required","as","rows","selected","placeholderText","Button","variant","onClick","type","memo","onDelete","onToggle","isEditing","setEditing","toggleTodoEditing","checked","onDoubleClick","AddTodo","isFormVisible","setFormVisible","toggleForm","TodoList","isListEmpty","length","map","key","Container","src","logo","alt","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.765b4f86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface Todo {\n  id: string;\n  name: string;\n  description: string;\n  due: string | null;\n  completedDate?: string | null;\n}\n\nexport const dateFormat = 'MM/DD/YYYY';\n\nconst demoTodo = {\n  id: uuidv4(),\n  name: 'Your first task',\n  description: 'Double-click here to edit this task, check the box on the left to complete it or click the × button on the right to delete it.',\n  due: moment().format(dateFormat),\n};\n\nconst rehydrateStorage = (): Array<Todo> => {\n  const store = localStorage.getItem('store');\n  return store ? JSON.parse(store) : [demoTodo];\n};\n\nconst syncStore = (todos: Array<Todo>) => {\n  localStorage.setItem('store', JSON.stringify(todos));\n};\n\nexport const createStore = () => ({\n  todos: rehydrateStorage(),\n\n  addTodo(data: Partial<Todo>) {\n    const todo = {\n      id: uuidv4(),\n      ...data,\n    } as Todo;\n    this.todos = [todo, ...this.todos];\n    syncStore(this.todos);\n  },\n\n  updateTodo(id: string, data: Partial<Todo>) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    const todo = this.todos[index];\n    this.todos = [\n      ...this.todos.slice(0, index),\n      {\n        ...todo,\n        ...data,\n      },\n      ...this.todos.slice(index + 1)\n    ];\n    syncStore(this.todos);\n  },\n\n  removeTodo({ id }: Todo) {\n    const index = this.todos.findIndex(todo => todo.id === id);\n    this.todos = [\n      ...this.todos.slice(0, index),\n      ...this.todos.slice(index + 1)\n    ];\n    syncStore(this.todos);\n  },\n\n  toggleTodo({ id }: Todo) {\n    const todo = this.todos.find(item => item.id === id);\n    if (!todo) {\n      return;\n    }\n    const data = {\n      completedDate: todo.completedDate ? null : moment().format()\n    };\n    this.updateTodo(id, data);\n  },\n});\n","import React from 'react';\nimport { createStore } from './createStore';\nimport { useLocalStore } from 'mobx-react-lite';\n\ntype Store = ReturnType<typeof createStore>;\n\nconst storeContext = React.createContext<Store | null>(null);\n\nexport const StoreProvider = ({ children }: any) => {\n  const store = useLocalStore(createStore);\n  return (\n    <storeContext.Provider value={store}>\n      {children}\n    </storeContext.Provider>\n  );\n}\n\nexport const useStore = () => {\n  const store = React.useContext(storeContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.');\n  }\n  return store;\n}\n","import React, { useState } from 'react';\n\ntype FormControlElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\ntype Returns = [\n  string,\n  {\n    value: string;\n    onChange: React.ChangeEventHandler<FormControlElement>\n  },\n  () => void\n];\n\nexport const useInput = (initialValue = ''): Returns => {\n  const [value, setValue] = useState(initialValue);\n\n  const props = {\n    value,\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => setValue(event.target.value)\n  };\n\n  const reset = () => setValue('');\n\n  return [value, props, reset];\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport moment from 'moment';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useStore } from '../store/useStore';\nimport { useInput } from '../hooks/useInput';\nimport { dateFormat } from '../store/createStore';\nimport { Todo } from '../store/createStore';\n\ninterface Props {\n  todo?: Todo;\n  onClose: () => void;\n}\n\nexport const EditForm = observer(({ todo, onClose }: Props) => {\n  const store = useStore();\n  const [name, nameProps, resetName] = useInput(todo ? todo.name : '');\n  const [description, descriptionProps, resetDescription] = useInput(todo ? todo.description : '');\n  const [due, setDue] = useState<Date | null>(todo && todo.due ? moment(todo.due).toDate() : null);\n\n  const saveTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    const dueDate = due && moment(due).format(dateFormat);\n    const data = { name, description, due: dueDate };\n    todo\n      ? store.updateTodo(todo.id, data)\n      : store.addTodo(data);\n    close();\n  };\n\n  const close = () => {\n    resetName();\n    resetDescription();\n    setDue(null);\n    onClose();\n  };\n\n  return (\n    <Form className=\"p-4 shadow\" onSubmit={saveTodo}>\n      {!todo && <>\n        <h4>Add New Task</h4>\n        <p className=\"text-muted\">Please fill out the form to add a new task.</p>\n      </>}\n      <Form.Group>\n        <Form.Control placeholder=\"Name\" required {...nameProps} />\n      </Form.Group>\n      <Form.Group>\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"Description\" {...descriptionProps} />\n      </Form.Group>\n      <Form.Group>\n        <DatePicker\n          className=\"form-control\"\n          selected={due}\n          placeholderText=\"Target completion date\"\n          onChange={value => setDue(value)}\n        />\n      </Form.Group>\n      <div className=\"text-right mb-2\">\n        <Button variant=\"default\" onClick={close}>\n          Cancel\n        </Button>\n        <Button className=\"ml-3\" variant=\"round\" type=\"submit\">\n          {todo ? 'Update' : 'Add Task'}\n        </Button>\n      </div>\n    </Form>\n  );\n});\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { EditForm } from './EditForm';\nimport { Todo } from '../store/createStore';\n\ninterface Props {\n  todo: Todo;\n  onDelete: (todo: Todo) => void;\n  onToggle: (todo: Todo) => void;\n}\n\nconst TodoListItem = ({ todo, onDelete, onToggle }: Props) => {\n  const [isEditing, setEditing] = useState(false);\n\n  const deleteTodo = () => onDelete(todo);\n\n  const toggleTodoCompletion = () => onToggle(todo);\n\n  const toggleTodoEditing = () => setEditing(!isEditing);\n\n  return (\n    <li className={!!todo.completedDate ? 'done' : ''}>\n      {isEditing && <EditForm todo={todo} onClose={toggleTodoEditing} />}\n      {!isEditing && <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={!!todo.completedDate}\n          onChange={toggleTodoCompletion}\n        />\n        <label onDoubleClick={toggleTodoEditing}>\n          <div className=\"name\">{todo.name}</div>\n          <div className=\"text-muted\">\n            {\n              todo.description && <div className=\"description my-2\">{todo.description}</div>\n            }\n            <div className=\"date\">\n              {todo.due && <span className=\"completion\">Due {todo.due}</span>}\n              {todo.completedDate && <span className=\"completed\">\n                — Completed {moment(todo.completedDate).format('LLL')}\n              </span>}\n            </div>\n          </div>\n        </label>\n        <button className=\"destroy\" onClick={deleteTodo} />\n      </div>}\n    </li>\n  );\n};\n\nexport default React.memo(TodoListItem);\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { observer } from 'mobx-react-lite';\nimport { EditForm } from './EditForm';\n\nexport const AddTodo = observer(() => {\n  const [isFormVisible, setFormVisible] = useState(false);\n  const toggleForm = () => setFormVisible(!isFormVisible);\n\n  return (\n    <section className=\"mb-4 text-center\">\n      {isFormVisible\n        ? <EditForm onClose={toggleForm} />\n        : <Button variant=\"round\" onClick={toggleForm}>Add New Task</Button>}\n    </section>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../store/useStore';\nimport TodoListItem from './TodoListItem';\nimport { AddTodo } from './AddTodo';\nimport './TodoList.css';\n\nexport const TodoList = observer(() => {\n  const store = useStore();\n  const isListEmpty = !store.todos.length;\n\n  return (\n    <div>\n      <AddTodo />\n      {isListEmpty && <p className=\"text-center text-muted\">\n        You don't have any tasks yet. <br />\n        Click Add New Task button above to add one.\n      </p>}\n      <ul className=\"todo-list shadow\">\n        {store.todos.map(todo => <TodoListItem\n          key={todo.id}\n          todo={todo}\n          onDelete={store.removeTodo}\n          onToggle={store.toggleTodo}\n        />)}\n      </ul>\n    </div>\n  );\n});\n","import React from 'react';\nimport { TodoList } from './TodoList/TodoList';\nimport { Container } from 'react-bootstrap';\nimport { StoreProvider } from './store/useStore';\nimport logo from './logo.svg';\n\nexport default () => {\n  return (\n    <Container className=\"App col-lg-6 col-md-8\">\n      <div className=\"text-center\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      <StoreProvider>\n        <TodoList />\n      </StoreProvider>\n    </Container>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}